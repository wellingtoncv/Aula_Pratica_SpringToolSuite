package com.EngSoftware.aulapratica.entities;

import java.io.Serializable;
import java.util.Objects;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;


//@Entity para dizer que esta clase é uma JPA
//@Table mapeamento da classe para tabela

@Entity 
@Table(name = "tb_user")
public class User implements Serializable {
    private static final long serialVersionUID = 1L;
    
	//Criação do objeto relacional dos bancos
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	
	private Long id;
	private String nome;
	private String email;
	private String telefone;
	private String password;
	
	//Objeto usuário com a ligação com objeto Department
	// Vários para um
	@ManyToOne
	@JoinColumn(name = "department_id")
	private Department department;
	
	//O método equals é usado para comparar se dois objetos são iguais, de acordo com a lógica definida na implementação desse método.
	@Override
	public int hashCode() {
		return Objects.hash(email, id, nome, password, telefone);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		User other = (User) obj;
		return Objects.equals(email, other.email) && Objects.equals(id, other.id) && Objects.equals(nome, other.nome)
				&& Objects.equals(password, other.password) && Objects.equals(telefone, other.telefone);
	}

	// Construtor da classe
	public User(Object object, String string, String string2, String string3, String string4) {
		
	}

	//Get and Set
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getNome() {
		return nome;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getTelefone() {
		return telefone;
	}

	public void setTelefone(String telefone) {
		this.telefone = telefone;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public Department getDepartment() {
		return department;
	}

	public void setDepartment(Department department) {
		this.department = department;
	}
	
}






package config;

import repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
//import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import com.EngSoftware.aulapratica.entities.User;

import java.util.Arrays;

@Configuration
public class TestConfig {
    @Autowired
    private UserRepository userRepository;

    //@Bean
    public CommandLineRunner loadData() {
        return args -> {
           // User u1 = new User(null, "Maria Brown", "maria@gmail.com", "988888888", "123456");
            //User u2 = new User(null, "Alex Green", "alex@gmail.com", "977777777", "123456");
           // userRepository.saveAll(Arrays.asList(u1, u2));
        };
    }
}


package resouce;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.EngSoftware.aulapratica.entities.User;

import services.UserService;

@RestController
@RequestMapping(value = "/users")
public class UserResource {

    @Autowired
    private UserService userService;

    @GetMapping
    public List<User> findAll() {
        return userService.findAll();
    }

    @GetMapping("/{id}")
    public User findById(@PathVariable Long id) {
        return userService.findById(id);
    }

    @PostMapping
    public User insert(@RequestBody User user) {
        return userService.insert(user);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) {
        userService.delete(id);
    }

    @PutMapping("/{id}")
    public User update(@PathVariable Long id, @RequestBody User user) {
        return userService.update(user);
    }
}

package services;

import java.util.List;
import com.EngSoftware.aulapratica.entities.User;

import services.exceptions.ResourceNotFoundException;

public class UserService {

    public User findById(Long id) throws ResourceNotFoundException {
        try {
            // Implementação do método findById
            // Se o recurso não for encontrado, lança uma exceção
            throw new ResourceNotFoundException("Usuário não encontrado com o ID: " + id, null);
        } catch (Exception e) {
            throw new ResourceNotFoundException("Erro ao encontrar usuário com o ID: " + id, e);
        }
    }
    
    public List<User> findAll()throws ResourceNotFoundException {
		try {
			// Implementação do método update
            // Se o recurso não for encontrado, lança uma exceção
            throw new ResourceNotFoundException("Usuário não encontrado para atualização", null);
        } catch (Exception e) {
            throw new ResourceNotFoundException("Erro ao atualizar usuário", e);
        }
    }

    public void delete(Long id) throws ResourceNotFoundException {
        try {
            // Implementação do método delete
            // Se o recurso não for encontrado, lança uma exceção
            throw new ResourceNotFoundException("Usuário não encontrado com o ID: " + id, null);
        } catch (Exception e) {
            throw new ResourceNotFoundException("Erro ao deletar usuário com o ID: " + id, e);
        }
    }

    public User update(User user) throws ResourceNotFoundException {
        try {
            // Implementação do método update
            // Se o recurso não for encontrado, lança uma exceção
            throw new ResourceNotFoundException("Usuário não encontrado para atualização", null);
        } catch (Exception e) {
            throw new ResourceNotFoundException("Erro ao atualizar usuário", e);
        }
    }

	public User insert(User user)throws ResourceNotFoundException {
		try {
			// Implementação do método update
            // Se o recurso não for encontrado, lança uma exceção
            throw new ResourceNotFoundException("Usuário não encontrado para atualização", null);
        } catch (Exception e) {
            throw new ResourceNotFoundException("Erro ao atualizar usuário", e);
        }
    }
}


package com.EngSoftware.aulapratica.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.EngSoftware.aulapratica.entities.User;
import com.EngSoftware.aulapratica.repositories.UserRepository;

@RestController
@RequestMapping(value = "/users")
public class UserController {
	
	@Autowired
	private UserRepository repository;
		   
	    @GetMapping
	    public List<User> findAll() {
	        List<User> result = repository.findAll();
			return result;
	    }

 }
